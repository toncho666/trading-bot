from hist_data import fetch_data
from tg_notification import send_telegram_message

import os
import importlib.util
import psycopg2
from datetime import datetime
import pandas as pd

DB_HOST = os.getenv("DB_HOST")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASS = os.getenv("DB_PASS")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Postgres
conn = psycopg2.connect(
    dbname=DB_NAME, 
    user=DB_USER, 
    password=DB_PASS, 
    host=DB_HOST, 
    port=5432
)
cur = conn.cursor()

# –ü–∞–ø–∫–∞ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
strategies_folder = "strategies"

def run_strategy(file):
    spec = importlib.util.spec_from_file_location("strategy", file)
    strategy = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(strategy)

    symbol = "BTC/USDT"
    timeframe = "1h"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = fetch_data(symbol, timeframe)

    print('data is')
    print(data)

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame
    signal_df = strategy.trading_strategy(data)

    print('signal_df is:')
    print(signal_df)

    if signal_df is not None and not signal_df.empty:
        last_row = signal_df.iloc[-1]   # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        if last_row["side"] in ["buy", "sell"]:
            print('–°–∏–≥–Ω–∞–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            signal_dict = {
                "symbol": symbol,
                "timeframe": timeframe,
                "side": last_row["side"],
                "volume": 10,
                "open_price": float(last_row["open_price"]),
                "close_price": float(last_row["close_price"]),
            }

            cur.execute(
                """
                INSERT INTO test.signals (strategy_name, symbol, timeframe, side, volume, open_price, close_price, created_at)
                VALUES (%s,%s,%s,%s,%s,%s,%s,%s)
                """,
                (
                    os.path.basename(file),
                    signal_dict["symbol"],
                    signal_dict["timeframe"],
                    signal_dict["side"],
                    signal_dict["volume"],
                    signal_dict["open_price"],
                    signal_dict["close_price"],
                    datetime.utcnow()
                )
            )
            conn.commit()
            print(f"[INFO] –°–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {signal_dict}")

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            msg = (
                f"üì¢ –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª!\n"
                f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {os.path.basename(file)}\n"
                f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {signal_dict['symbol']}\n"
                f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {signal_dict['timeframe']}\n"
                f"–°—Ç–æ—Ä–æ–Ω–∞: {signal_dict['side'].upper()}\n"
                f"–û–±—ä—ë–º: {signal_dict['volume']}\n"
                f"–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {signal_dict['open_price']}\n"
                f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {signal_dict['close_price']}\n"
                f"–í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}"
            )
            send_telegram_message(tg_token = TELEGRAM_TOKEN
                                  ,tg_chat_id = TELEGRAM_CHAT_ID 
                                  ,message = msg)
        else:
            print('–°–∏–≥–Ω–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    else:
        print('–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏')

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
for f in os.listdir(strategies_folder):
    if f.endswith(".py"):
        run_strategy(os.path.join(strategies_folder, f))

cur.close()
conn.close()
